taskKey="com.codegym.games.snake.part08"\n\nSnake (Part 8/20)

The snake must move with every turn. A turn takes a certain amount of time, which you can set.

To implement the logic for moving the snake, create a
move() method in the Snake class. Override the onTurn(int) method of the parent of the SnakeGame class. Everything that should happen in the game during one turn is
described here. After moving the snake, don't forget to redraw the playing field.

To set the duration of a turn, create a turnDelay variable. The game will start at a speed of 300ms/turn. Set the duration of a turn
when the game is created.


Requirements:
1.	The Snake class must have a public void move() method.
2.	The SnakeGame class must override the Game parent class&#39;s onTurn(int) method.
3.	The move() method must be called on the snake object in the onTurn(int) method.
4.	In the onTurn(int) method, the drawScene() method must be called after the call to snake.move().
5.	There must be a private int turnDelay variable in the SnakeGame class.
6.	The turnDelay field must be initialized to 300 in the createGame() method.
7.	The setTurnTimer(int) method must be called in the createGame() method. Pass turnDelay as the argument.


Snake (Part 7/20)

An object on the playing field can have one of two states: it can be alive (isAlive=true) or dead (isAlive=false).
For example, if the snake hits the edge of the playing field, it dies. The same thing happens to an apple when it is eaten by the snake. To store object state,
create a boolean isAlive variable in the Apple and Snake classes. Modify the logic for drawing a snake so that dead snakes are red.

The snake can move in one of four directions. To indicate these directions, create a Direction enum with UP, RIGHT, DOWN, and LEFT fields.
And in the Snake class, create a direction field, which will store the current direction of movement. Let the snake initially move to the left. The
snake's direction will be changed by the setDirection(Direction) method. Create it.



Snake (Part 6/20)

Once we have a snake, we need to draw it. To do this, by analogy with the Apple class, create HEAD_SIGN and BODY_SIGN constants in the Snake class.
They will store symbols for drawing the head and body of the snake. Also, create a draw(Game) method to draw the snake
on the playing field.

We'll handle drawing the snake from the SnakeGame class. So, create a Snake snake variable in the SnakeGame class: it will store
the snake's current state. In the createGame() method, create a new snake in the center of the playing field and assign it to the snake variable. In the drawScene method(),
call the draw(Game) method on the snake to draw it on the playing field.



Snake (Part 5/20)

Now let's tackle the snake, and we'll remove the test creation and drawing of the apple in the createGame() method.

Create a Snake class. The snake will consist of several cells, i.e. several GameObjects. What's more,
the number of cells can vary: the snake grows
longer when it eats apples. We'll store a list of all snake segments in a List<GameObject> snakeParts
field.

Add a constructor to the Snake class that creates three snake segment all at once.



Snake (Part 4/20)

One of the game objects will be an apple. Create an Apple class and make it inherit the GameObject class.

To represent an apple on the playing field, you could paint cells containing apples any particular color. Or you could draw some apple-looking symbol
in the cell. Let the Apple class store this symbol in the APPLE_SIGN variable.

Add a draw(Game) method to the Apple class: it will draw an apple on the playing field. To do this, in the draw(Game game) method, you need to
call game.setCellValueEx(...).

Because the Apple class uses the Game and Color classes, these (and other) engine classes are located in the
com.codegym.engine.cell package. To use them, the Apple class must include the following import statement:
import com.codegym.engine.cell.*;

To see what an apple will look like, in the createGame() method, create an apple with coordinates (7, 7) and call its draw(Game) method.



Snake (Part 3/20)

To store the game objects, we need an additional class.
Objects of this class will store cell coordinates.
Let's call it GameObject.



