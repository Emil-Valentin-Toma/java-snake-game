taskKey="com.codegym.games.snake.part15"\n\nSnake (Part 15/20)

To store the game state, we'll need the isGameStopped variable in the SnakeGame class. Initialize
it in the createGame() method. When a game is lost, stop the game and display a message about the loss to the player.
To do this, create a gameOver() method and add the statements that should be executed when the game is stopped (lost):
- call the stopTurnTimer() method;
- set the isGameStopped flag equal to true;
- display "GAME OVER".
You need to check the isGameStopped flag at the end of each turn and, if the game is stopped, call the gameOver() method.


Requirements:
1.	The SnakeGame class must have a private boolean isGameStopped field.
2.	In the createGame() method, the isGameStopped field must be initialized to false before the call to the drawScene() method.
3.	The SnakeGame class must have a private void gameOver() method.
4.	The gameOver() method must call the parent class&#39;s stopTurnTimer() method.
5.	The gameOver() method must set the isGameStopped field to true.
6.	The gameOver() method must call the parent class&#39;s showMessageDialog(Color, String, Color, int) method.
7.	In the onTurn(int) method, the gameOver() method must be called before the drawScene() method if the snake is dead (isAlive == false).


Snake (Part 14/20)

Currently, the snake can pass through its own body, but this is against the rules. To fix this, you need to check the newly created snake head to see whether it coincides
with any of the other snake segments. To do this, create a checkCollision(GameObject) method in the Snake class. The checkCollision(GameObject) method must
return true if the coordinates of the passed object match with the coordinates of one of the snake segments. Also, in the move(Apple) method, add
a check to see whether the new head collides with its body. If a collision occurs, set the isAlive variable to false.



Snake (Part 13/20)

Until now, we've set the apple's coordinates manually. We need to create a method for generating new apples. Let's call it createNewApple().
The method should generate random cell coordinates within the playing field, which determine where the apple will appear. Assign a reference to the newly created
apple to the apple field. Also, at the end of each turn you need to check whether the current apple is still alive. If it is not, then create a new one.
To generate random numbers, call the parent class's getRandomNumber(int) method.



Snake (Part 12/20)

Now we have an apple and a snake that can move. Now we'll implement the logic to make them interact. To start, add an apple variable to
the SnakeGame class, and initialize its coordinates to (5, 5) when the game is created. And, draw an apple.

Rewrite the Snake class's move() method. Now it should take an apple as an argument. And if the snake eats an apple, the apple's
state should be set to dead, and the snake's size should increase by 1 element.



Snake (Part 11/20)

Let's add the ability to control our snake. To handle key presses, override the Game parent class's onKeyPress(Key) method. Depending on which key is
pressed, set the appropriate direction of snake movement. Bear in mind that a snake cannot instantly turn 180 degrees.



Snake (Part 10/20)

Now you need to combine the work of the createNewHead() and removeTail() methods. The move() method is a good place to do this.

Add a check to see whether the snake has gone beyond the boundaries of the playing field. If the new head is beyond the boundaries of the playing field, set the snake's state to dead.

After moving the snake, you need to clear from the playing field any snake segments that no longer exist. To do this, the drawScene() method should not only
change the color of cells, but also assign an empty string to those cells.



