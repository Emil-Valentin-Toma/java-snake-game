taskKey="com.codegym.games.snake.part18"\n\nSnake (Part 18/20)

Let's fix our snake control. The direction field can only be changed to currently valid values: LEFT, RIGHT, UP, and DOWN.


Requirements:
1.	The Snake class&#39;s setDirection(Direction) method must not do anything if the value of the direction field is LEFT, and the snake segments with indices 0 and 1 in the snakeParts list have the same x coordinate.
2.	The Snake class&#39;s setDirection(Direction) method must not do anything if the value of the direction field is RIGHT, and the snake segments with indices 0 and 1 in the snakeParts list have the same x coordinate.
3.	The Snake class&#39;s setDirection(Direction) method must not do anything if the value of the direction field is UP, and the snake segments with indices 0 and 1 in the snakeParts list have the same y coordinate.
4.	The Snake class&#39;s setDirection(Direction) method must not do anything if the value of the direction field is DOWN, and the snake segments with indices 0 and 1 in the snakeParts list have the same y coordinate.


Snake (Part 17/20)

At this stage, we have a bug â€” an apple can appear on top of the snake. To fix the bug, use our
checkCollision(GameObject) method. The createNewApple() method must create a new apple (with new coordinates) in a loop until
the call to the checkCollision(GameObject) method returns false.

Let's also implement logic to restart the game by pressing the SPACE key. The game restarts only if it is stopped.



Snake (Part 16/20)

The game must also stop in the event of a win. The player wins if the snake grows to a certain size. To store this size,
in the SnakeGame class, create a GOAL constant and initialize it to 28. To determine the snake's current size, create and implement
a getLength() method in the Snake class. By analogy with the gameOver() method, create and implement a win() method. But instead of "GAME OVER", it must
display "YOU WIN". You must also check whether the win condition is satisfied at the end of each turn.



Snake (Part 15/20)

To store the game state, we'll need the isGameStopped variable in the SnakeGame class. Initialize
it in the createGame() method. When a game is lost, stop the game and display a message about the loss to the player.
To do this, create a gameOver() method and add the statements that should be executed when the game is stopped (lost):
- call the stopTurnTimer() method;
- set the isGameStopped flag equal to true;
- display "GAME OVER".
You need to check the isGameStopped flag at the end of each turn and, if the game is stopped, call the gameOver() method.



Snake (Part 14/20)

Currently, the snake can pass through its own body, but this is against the rules. To fix this, you need to check the newly created snake head to see whether it coincides
with any of the other snake segments. To do this, create a checkCollision(GameObject) method in the Snake class. The checkCollision(GameObject) method must
return true if the coordinates of the passed object match with the coordinates of one of the snake segments. Also, in the move(Apple) method, add
a check to see whether the new head collides with its body. If a collision occurs, set the isAlive variable to false.



Snake (Part 13/20)

Until now, we've set the apple's coordinates manually. We need to create a method for generating new apples. Let's call it createNewApple().
The method should generate random cell coordinates within the playing field, which determine where the apple will appear. Assign a reference to the newly created
apple to the apple field. Also, at the end of each turn you need to check whether the current apple is still alive. If it is not, then create a new one.
To generate random numbers, call the parent class's getRandomNumber(int) method.



