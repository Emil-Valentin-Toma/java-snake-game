taskKey="com.codegym.games.snake.part14"\n\nSnake (Part 14/20)

Currently, the snake can pass through its own body, but this is against the rules. To fix this, you need to check the newly created snake head to see whether it coincides
with any of the other snake segments. To do this, create a checkCollision(GameObject) method in the Snake class. The checkCollision(GameObject) method must
return true if the coordinates of the passed object match with the coordinates of one of the snake segments. Also, in the move(Apple) method, add
a check to see whether the new head collides with its body. If a collision occurs, set the isAlive variable to false.


Requirements:
1.	The Snake class must have a public boolean checkCollision(GameObject) method.
2.	The checkCollision(GameObject) method must return true if the passed object&#39;s coordinates match the coordinates of any of the snake segments (elements in the snakeParts list).
3.	The checkCollision(GameObject) method must return false if the passed object&#39;s coordinates do not match the coordinates of any of the snake segments (elements in the snakeParts list).
4.	The move(Apple) method must call the checkCollision(GameObject) method with the new head as the argument before the new snake segment is added to the snakeParts list.
5.	If the call to the checkCollision(GameObject) method returns true, the isAlive field must be set to false.
6.	If the call to the checkCollision(GameObject) method returns true, the snakeParts list must not be changed.


Snake (Part 13/20)

Until now, we've set the apple's coordinates manually. We need to create a method for generating new apples. Let's call it createNewApple().
The method should generate random cell coordinates within the playing field, which determine where the apple will appear. Assign a reference to the newly created
apple to the apple field. Also, at the end of each turn you need to check whether the current apple is still alive. If it is not, then create a new one.
To generate random numbers, call the parent class's getRandomNumber(int) method.



Snake (Part 12/20)

Now we have an apple and a snake that can move. Now we'll implement the logic to make them interact. To start, add an apple variable to
the SnakeGame class, and initialize its coordinates to (5, 5) when the game is created. And, draw an apple.

Rewrite the Snake class's move() method. Now it should take an apple as an argument. And if the snake eats an apple, the apple's
state should be set to dead, and the snake's size should increase by 1 element.



Snake (Part 11/20)

Let's add the ability to control our snake. To handle key presses, override the Game parent class's onKeyPress(Key) method. Depending on which key is
pressed, set the appropriate direction of snake movement. Bear in mind that a snake cannot instantly turn 180 degrees.



Snake (Part 10/20)

Now you need to combine the work of the createNewHead() and removeTail() methods. The move() method is a good place to do this.

Add a check to see whether the snake has gone beyond the boundaries of the playing field. If the new head is beyond the boundaries of the playing field, set the snake's state to dead.

After moving the snake, you need to clear from the playing field any snake segments that no longer exist. To do this, the drawScene() method should not only
change the color of cells, but also assign an empty string to those cells.



Snake (Part 9/20)

Moving the snake is very simple: in a cell next to the head, a new head is created, and the last element (tail) of the snake is removed.

In the Snake class, implement a createNewHead() method that creates and returns a new GameObject. The new
GameObject must be created next to the element that currently contains the snake head (element with index 0 in snakeParts).
The new GameObject is created in the direction of the snake's movement (direction field).
For example:
- if the snake is moving to the left, new GameObject(headX-1, headY);
- if the snake is moving down, new GameObject(headX, headY + 1)
Here, headX is the x coordinate of the snake's head, and headY is the y coordinate of the snake's head.

Note: coordinates can be negative and/or be beyond the boundaries of the playing field. This is okay for now. We'll fix it later.

Create and implement a removeTail() method in the Snake class.



