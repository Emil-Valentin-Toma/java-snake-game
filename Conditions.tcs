taskKey="com.codegym.games.snake.part13"\n\nSnake (Part 13/20)

Until now, we've set the apple's coordinates manually. We need to create a method for generating new apples. Let's call it createNewApple().
The method should generate random cell coordinates within the playing field, which determine where the apple will appear. Assign a reference to the newly created
apple to the apple field. Also, at the end of each turn you need to check whether the current apple is still alive. If it is not, then create a new one.
To generate random numbers, call the parent class's getRandomNumber(int) method.


Requirements:
1.	The SnakeGame class must have a private void createNewApple() method.
2.	The getRandomNumber(int) method must be called twice in the createNewApple() method. The first time &mdash; with WIDTH as the argument; the second time &mdash; with HEIGHT as the argument.
3.	The createNewApple() method must create a new Apple object. Pass the results of the two calls to the getRandomNumber(int) method as arguments.
4.	The apple field must be assigned a reference to the created Apple object.
5.	A new Apple object must not be created in the createGame() method.
6.	In the createGame() method, the createNewApple() method must be called before the drawScene() method.
7.	In the onTurn() method, if apple.isAlive == false, you must call the createNewApple() method before calling the drawScene() method.


Snake (Part 12/20)

Now we have an apple and a snake that can move. Now we'll implement the logic to make them interact. To start, add an apple variable to
the SnakeGame class, and initialize its coordinates to (5, 5) when the game is created. And, draw an apple.

Rewrite the Snake class's move() method. Now it should take an apple as an argument. And if the snake eats an apple, the apple's
state should be set to dead, and the snake's size should increase by 1 element.



Snake (Part 11/20)

Let's add the ability to control our snake. To handle key presses, override the Game parent class's onKeyPress(Key) method. Depending on which key is
pressed, set the appropriate direction of snake movement. Bear in mind that a snake cannot instantly turn 180 degrees.



Snake (Part 10/20)

Now you need to combine the work of the createNewHead() and removeTail() methods. The move() method is a good place to do this.

Add a check to see whether the snake has gone beyond the boundaries of the playing field. If the new head is beyond the boundaries of the playing field, set the snake's state to dead.

After moving the snake, you need to clear from the playing field any snake segments that no longer exist. To do this, the drawScene() method should not only
change the color of cells, but also assign an empty string to those cells.



Snake (Part 9/20)

Moving the snake is very simple: in a cell next to the head, a new head is created, and the last element (tail) of the snake is removed.

In the Snake class, implement a createNewHead() method that creates and returns a new GameObject. The new
GameObject must be created next to the element that currently contains the snake head (element with index 0 in snakeParts).
The new GameObject is created in the direction of the snake's movement (direction field).
For example:
- if the snake is moving to the left, new GameObject(headX-1, headY);
- if the snake is moving down, new GameObject(headX, headY + 1)
Here, headX is the x coordinate of the snake's head, and headY is the y coordinate of the snake's head.

Note: coordinates can be negative and/or be beyond the boundaries of the playing field. This is okay for now. We'll fix it later.

Create and implement a removeTail() method in the Snake class.



Snake (Part 8/20)

The snake must move with every turn. A turn takes a certain amount of time, which you can set.

To implement the logic for moving the snake, create a
move() method in the Snake class. Override the onTurn(int) method of the parent of the SnakeGame class. Everything that should happen in the game during one turn is
described here. After moving the snake, don't forget to redraw the playing field.

To set the duration of a turn, create a turnDelay variable. The game will start at a speed of 300ms/turn. Set the duration of a turn
when the game is created.



