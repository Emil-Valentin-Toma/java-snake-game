taskKey="com.codegym.games.snake.part10"\n\nSnake (Part 10/20)

Now you need to combine the work of the createNewHead() and removeTail() methods. The move() method is a good place to do this.

Add a check to see whether the snake has gone beyond the boundaries of the playing field. If the new head is beyond the boundaries of the playing field, set the snake's state to dead.

After moving the snake, you need to clear from the playing field any snake segments that no longer exist. To do this, the drawScene() method should not only
change the color of cells, but also assign an empty string to those cells.


Requirements:
1.	The createNewHead() method must be called in the Snake class&#39;s move() method.
2.	In the move() method, the result of the call to the createNewHead() method must be added to snakeParts at position 0.
3.	In the Snake class&#39;s move() method, the removeTail() method must be called after the new snake head is created.
4.	In the move() method, if the createNewHead() method returns an element whose coordinates are outside the playing field, you need to set the isAlive field to false and do nothing else.
5.	In the SnakeGame class&#39;s drawScene() method, you must replace the call to the setCellColor(int, int, Color) method with a call to the setCellValueEx(int, int, Color, String) method with arguments (x, y, &lt;color&gt; (for example, Color.DARKSEAGREEN), &quot;&quot;).


Snake (Part 9/20)

Moving the snake is very simple: in a cell next to the head, a new head is created, and the last element (tail) of the snake is removed.

In the Snake class, implement a createNewHead() method that creates and returns a new GameObject. The new
GameObject must be created next to the element that currently contains the snake head (element with index 0 in snakeParts).
The new GameObject is created in the direction of the snake's movement (direction field).
For example:
- if the snake is moving to the left, new GameObject(headX-1, headY);
- if the snake is moving down, new GameObject(headX, headY + 1)
Here, headX is the x coordinate of the snake's head, and headY is the y coordinate of the snake's head.

Note: coordinates can be negative and/or be beyond the boundaries of the playing field. This is okay for now. We'll fix it later.

Create and implement a removeTail() method in the Snake class.



Snake (Part 8/20)

The snake must move with every turn. A turn takes a certain amount of time, which you can set.

To implement the logic for moving the snake, create a
move() method in the Snake class. Override the onTurn(int) method of the parent of the SnakeGame class. Everything that should happen in the game during one turn is
described here. After moving the snake, don't forget to redraw the playing field.

To set the duration of a turn, create a turnDelay variable. The game will start at a speed of 300ms/turn. Set the duration of a turn
when the game is created.



Snake (Part 7/20)

An object on the playing field can have one of two states: it can be alive (isAlive=true) or dead (isAlive=false).
For example, if the snake hits the edge of the playing field, it dies. The same thing happens to an apple when it is eaten by the snake. To store object state,
create a boolean isAlive variable in the Apple and Snake classes. Modify the logic for drawing a snake so that dead snakes are red.

The snake can move in one of four directions. To indicate these directions, create a Direction enum with UP, RIGHT, DOWN, and LEFT fields.
And in the Snake class, create a direction field, which will store the current direction of movement. Let the snake initially move to the left. The
snake's direction will be changed by the setDirection(Direction) method. Create it.



Snake (Part 6/20)

Once we have a snake, we need to draw it. To do this, by analogy with the Apple class, create HEAD_SIGN and BODY_SIGN constants in the Snake class.
They will store symbols for drawing the head and body of the snake. Also, create a draw(Game) method to draw the snake
on the playing field.

We'll handle drawing the snake from the SnakeGame class. So, create a Snake snake variable in the SnakeGame class: it will store
the snake's current state. In the createGame() method, create a new snake in the center of the playing field and assign it to the snake variable. In the drawScene method(),
call the draw(Game) method on the snake to draw it on the playing field.



Snake (Part 5/20)

Now let's tackle the snake, and we'll remove the test creation and drawing of the apple in the createGame() method.

Create a Snake class. The snake will consist of several cells, i.e. several GameObjects. What's more,
the number of cells can vary: the snake grows
longer when it eats apples. We'll store a list of all snake segments in a List<GameObject> snakeParts
field.

Add a constructor to the Snake class that creates three snake segment all at once.



